{"version":3,"sources":["serviceWorker.js","Components/FigureDrawer/FigureDrawer.component.js","index.js"],"names":["Boolean","window","location","hostname","match","FigureDrawer","controlpoints","React","createRef","canvas","selectedElement","angle","state","hasRendered","poly","points","this","current","value","drawPolygon","parseInt","getBoundingClientRect","drawShape","width","height","centerx","centery","radius1","radius2","alpha0","filltext","ctx","getContext","i","Math","PI","radius","x","cos","y","sin","moveTo","lineTo","fillText","push","number","strokeStyle","fillStyle","lineWidth","stroke","console","log","setState","htmlFor","id","name","ref","map","key","type","min","max","onClick","rotate","elem","find","rotateThing","centerX","centerY","theAngle","sides","save","translate","beginPath","restore","className","onDrawClick","renderCanvas","renderControls","pointSelect","PureComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.273ee6d6.chunk.js","sourcesContent":["// eslint-disable-next-line\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                // eslint-disable-next-line no-use-before-define\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                // eslint-disable-next-line no-use-before-define\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            // eslint-disable-next-line no-param-reassign\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React, { PureComponent } from 'react';\n\nclass FigureDrawer extends PureComponent {\n    constructor() {\n        super();\n        this.controlpoints = React.createRef();\n        this.canvas = React.createRef();\n        this.selectedElement = React.createRef();\n        this.angle = React.createRef();\n        this.state = {\n            hasRendered: false,\n            poly: []\n        };\n    }\n\n    onDrawClick() {\n        const points = this.controlpoints.current.value;\n        this.drawPolygon(parseInt(points, 10));\n    }\n\n    drawPolygon(points) {\n        const canvas = this.canvas.current.getBoundingClientRect();\n        this.drawShape(canvas.width / 2, canvas.height / 2, points, 50, 50, 0);\n    }\n\n    drawShape(centerx, centery, points, radius1, radius2, alpha0, filltext = true) {\n        const ctx = this.canvas.current.getContext('2d');\n        // eslint-disable-next-line no-param-reassign\n        points = radius2 !== radius1 ? 2 * points : points;\n        const poly = [];\n        for (let i = 0; i <= points; i++) {\n            const angle = (i * 2 * Math.PI) / points - Math.PI / 2 + alpha0;\n            const radius = i % 2 === 0 ? radius1 : radius2;\n            const x = centerx + radius * Math.cos(angle);\n            const y = centerx + radius * Math.sin(angle);\n            if (!filltext) ctx.moveTo(x, y);\n            ctx.lineTo(x, y);\n            if (filltext && i !== 0) ctx.fillText(i, x - 5, y - 5);\n            poly.push({ number: i, x, y });\n        }\n        ctx.strokeStyle = '#bada55';\n        ctx.fillStyle = '#bada55';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        console.log(poly);\n        this.setState({ hasRendered: true, poly });\n    }\n\n    pointSelect() {\n        const { poly } = this.state;\n        return (\n          <>\n              <label htmlFor=\"availablePoints\">\n                  Select point\n             <select\n               id=\"availablePoints\"\n               name=\"lol\"\n               ref={ this.selectedElement }\n             >\n                 { poly.map(({ number }) => (<option key={ number } value={ number }>{ number }</option>)) }\n             </select>\n              </label>\n              <label htmlFor=\"angle\">\n                  Select Angle to rotate\n                  <input\n                    type=\"number\"\n                    id=\"angle\"\n                    min=\"-360\"\n                    max=\"360\"\n                    ref={ this.angle }\n                  />\n              </label>\n              <button\n                onClick={ () => this.rotate() }\n              >\n                  Rotate\n              </button>\n          </>\n        );\n    }\n\n    rotate() {\n        const { poly } = this.state;\n        const elem = parseInt(this.selectedElement.current.value, 10);\n        const angle = parseInt(this.angle.current.value, 10);\n        const points = parseInt(this.controlpoints.current.value, 10);\n        const { x, y } = poly.find(({ number }) => number === elem);\n        this.rotateThing(x, y, -angle * (Math.PI / 180), points);\n    }\n\n    rotateThing(centerX, centerY, theAngle, sides) {\n        const ctx = this.canvas.current.getContext('2d');\n        ctx.save();\n        ctx.translate(centerX, centerY);\n        ctx.rotate(theAngle);\n        ctx.translate(-50, 0);\n        ctx.beginPath();\n        for (let i = 0; i <= sides; i++) {\n            const x = 50 * Math.cos((i * 2 * Math.PI) / sides);\n            const y = 50 * Math.sin((i * 2 * Math.PI) / sides);\n            ctx.lineTo(x, y);\n        }\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    renderCanvas() {\n        return (\n            <canvas\n              ref={ this.canvas }\n              className=\"Canvas\"\n              width={ 500 }\n              height={ 500 }\n            />\n        );\n    }\n\n    renderControls() {\n        return (\n            <div className=\"controls\">\n                <label htmlFor=\"controlpoints\">\n                    Number of points\n                    <input type=\"number\" ref={ this.controlpoints } id=\"controlpoints\" min=\"3\" max=\"11\" />\n                </label>\n                <button onClick={ () => this.onDrawClick() }>\n                    Draw\n                </button>\n            </div>\n        );\n    }\n\n    render() {\n        const { hasRendered } = this.state;\n        return (\n            <div>\n                { this.renderCanvas() }\n                { this.renderControls() }\n                { hasRendered ? this.pointSelect() : null }\n            </div>\n        );\n    }\n}\n\nexport default FigureDrawer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FigureDrawer from './Components/FigureDrawer';\n\nReactDOM.render(<FigureDrawer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}